/**
 * PDNS-API
 * This is PDNS RESTful API Server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelDomain from '../model/ModelDomain';
import ModelRecord from '../model/ModelRecord';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the domainsGet operation.
     * @callback module:api/DefaultApi~domainsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelDomain>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get domains
     * get domains
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id Domain ID
     * @param {String} opts.name Name
     * @param {module:api/DefaultApi~domainsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelDomain>}
     */
    domainsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ID'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelDomain];
      return this.apiClient.callApi(
        '/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsNameDelete operation.
     * @callback module:api/DefaultApi~domainsNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelDomain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete domain
     * delete domain
     * @param {String} name Domain Name
     * @param {module:api/DefaultApi~domainsNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelDomain}
     */
    domainsNameDelete(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling domainsNameDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ID'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelDomain;
      return this.apiClient.callApi(
        '/domains/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsNamePut operation.
     * @callback module:api/DefaultApi~domainsNamePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelDomain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update domain
     * update domain
     * @param {String} name Dorain Name
     * @param {module:model/ModelDomain} domain Domain Object
     * @param {module:api/DefaultApi~domainsNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelDomain}
     */
    domainsNamePut(name, domain, callback) {
      let postBody = domain;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling domainsNamePut");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling domainsNamePut");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ID'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelDomain;
      return this.apiClient.callApi(
        '/domains/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsPost operation.
     * @callback module:api/DefaultApi~domainsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelDomain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create domain
     * create domain
     * @param {module:model/ModelDomain} domain Domain Object
     * @param {module:api/DefaultApi~domainsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelDomain}
     */
    domainsPost(domain, callback) {
      let postBody = domain;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling domainsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ID'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelDomain;
      return this.apiClient.callApi(
        '/domains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordsDisableIdPut operation.
     * @callback module:api/DefaultApi~recordsDisableIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * disable record
     * disable record
     * @param {Number} id Record ID 
     * @param {module:model/ModelRecord} record Record Object
     * @param {module:api/DefaultApi~recordsDisableIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelRecord}
     */
    recordsDisableIdPut(id, record, callback) {
      let postBody = record;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recordsDisableIdPut");
      }
      // verify the required parameter 'record' is set
      if (record === undefined || record === null) {
        throw new Error("Missing the required parameter 'record' when calling recordsDisableIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ID'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelRecord;
      return this.apiClient.callApi(
        '/records/disable/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordsEnableIdPut operation.
     * @callback module:api/DefaultApi~recordsEnableIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * enable record
     * enable record
     * @param {Number} id Record ID 
     * @param {module:model/ModelRecord} record Record Object
     * @param {module:api/DefaultApi~recordsEnableIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelRecord}
     */
    recordsEnableIdPut(id, record, callback) {
      let postBody = record;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recordsEnableIdPut");
      }
      // verify the required parameter 'record' is set
      if (record === undefined || record === null) {
        throw new Error("Missing the required parameter 'record' when calling recordsEnableIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ID'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelRecord;
      return this.apiClient.callApi(
        '/records/enable/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordsGet operation.
     * @callback module:api/DefaultApi~recordsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelRecord>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get records
     * get records
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id Record ID
     * @param {Number} opts.domainId Domain ID
     * @param {module:api/DefaultApi~recordsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelRecord>}
     */
    recordsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'domain_id': opts['domainId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ID'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelRecord];
      return this.apiClient.callApi(
        '/records', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordsIdDelete operation.
     * @callback module:api/DefaultApi~recordsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete record
     * delete record
     * @param {Number} id Record ID 
     * @param {module:api/DefaultApi~recordsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelRecord}
     */
    recordsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recordsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ID'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelRecord;
      return this.apiClient.callApi(
        '/records/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordsIdPut operation.
     * @callback module:api/DefaultApi~recordsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update record
     * update record
     * @param {Number} id Record ID 
     * @param {module:model/ModelRecord} record Record Object
     * @param {module:api/DefaultApi~recordsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelRecord}
     */
    recordsIdPut(id, record, callback) {
      let postBody = record;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recordsIdPut");
      }
      // verify the required parameter 'record' is set
      if (record === undefined || record === null) {
        throw new Error("Missing the required parameter 'record' when calling recordsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ID'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelRecord;
      return this.apiClient.callApi(
        '/records/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordsPost operation.
     * @callback module:api/DefaultApi~recordsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create record
     * create record
     * @param {module:model/ModelRecord} record Record Object
     * @param {module:api/DefaultApi~recordsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelRecord}
     */
    recordsPost(record, callback) {
      let postBody = record;
      // verify the required parameter 'record' is set
      if (record === undefined || record === null) {
        throw new Error("Missing the required parameter 'record' when calling recordsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ID'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelRecord;
      return this.apiClient.callApi(
        '/records', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
